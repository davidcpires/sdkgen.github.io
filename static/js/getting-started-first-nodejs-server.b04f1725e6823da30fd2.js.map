{"version":3,"sources":["/home/travis/build/sdkgen/sdkgen.github.io/getting-started/first-nodejs-server.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+XAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,6KAA4J,+BAAGC,WAAW,KAAQ,CAC9K,KAAQ,oCADgJ,oCAG5J,gDACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,2BAEL,iBAAQ,CACN,GAAM,+BADR,+BAGA,kCAAiB,0BAAYA,WAAW,KAAvB,cAAjB,uCACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,4KAYL,8FAA6E,0BAAYA,WAAW,KAAvB,wDAA7E,KACA,iBAAQ,CACN,GAAM,yBADR,yBAGA,mEACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,qGAKL,sCAAqB,0BAAYA,WAAW,KAAvB,WAArB,UACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0iBAuBL,iBAAQ,CACN,GAAM,mBADR,mBAGA,0CACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,6B,6LAOTJ,EAAWK,gBAAiB","file":"static/js/getting-started-first-nodejs-server.a1e0c663.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"installing-sdkgen\"\n    }}>{`Installing sdkgen`}</h1>\n    <p>{`First of all you need Node.js ready on your machine. Versions 8, 10 or 12 are supported (all stable maintained release channels). Check for it here: `}<a parentName=\"p\" {...{\n        \"href\": \"https://nodejs.org/en/download/\"\n      }}>{`https://nodejs.org/en/download/`}</a></p>\n    <p>{`Install the global CLI:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm i -g @sdkgen/cli\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"creating-an-api-description\"\n    }}>{`Creating an API description`}</h1>\n    <p>{`Create an `}<inlineCode parentName=\"p\">{`api.sdkgen`}</inlineCode>{` to describe your API. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type Post {\n    id: uuid\n    title: string\n    body: string\n    createdAt: datetime\n    author: {\n        name: string\n    }\n}\n\nfn getPost(id: uuid): Post?\n`}</code></pre>\n    <p>{`You can then generate the TypeScript source for this description with `}<inlineCode parentName=\"p\">{`sdkgen api.sdkgen -o api.ts -t typescript_nodeserver`}</inlineCode>{`.`}</p>\n    <h1 {...{\n      \"id\": \"creating-base-project\"\n    }}>{`Creating base project`}</h1>\n    <p>{`Let's start a new project with TypeScript:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm init -y\nnpm i --save-dev typescript\nnpm i @sdkgen/node-runtime\nnpx tsc --init -t esnext\n`}</code></pre>\n    <p>{`Then create a `}<inlineCode parentName=\"p\">{`main.ts`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Import sdkgen's runtime and the generated file\nimport { SdkgenHttpServer } from \"@sdkgen/node-runtime\";\nimport { api } from \"./api\";\n\n// Every endpoint described must receive some implementation\napi.fn.getPost = async (ctx, {id}) => {\n    return {\n        id,\n        title: \"Getting Started\",\n        author: {\n            name: \"John Doe\"\n        },\n        body: \"Lorem ipsum\",\n        createdAt: new Date(),\n    };\n};\n\n// Start a HTTP server for the API\nconst server = new SdkgenHttpServer(api, {});\nserver.listen(8000);\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"run-the-project\"\n    }}>{`Run the project`}</h1>\n    <p>{`Build and run it:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npx tsc\nnode main.js\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}