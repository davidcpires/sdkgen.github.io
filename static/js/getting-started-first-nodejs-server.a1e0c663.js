(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./getting-started/first-nodejs-server.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return o}));var r=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),a={},s="wrapper";function o(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)(s,Object.assign({},a,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"installing-sdkgen"},"Installing sdkgen"),Object(i.b)("p",null,"First of all you need Node.js ready on your machine. Versions 8, 10 or 12 are supported (all stable maintained release channels). Check for it here: ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"https://nodejs.org/en/download/"}),"https://nodejs.org/en/download/")),Object(i.b)("p",null,"Install the global CLI:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{}),"npm i -g @sdkgen/cli\n")),Object(i.b)("h1",{id:"creating-an-api-description"},"Creating an API description"),Object(i.b)("p",null,"Create an ",Object(i.b)("inlineCode",{parentName:"p"},"api.sdkgen")," to describe your API. For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{}),"type Post {\n    id: uuid\n    title: string\n    body: string\n    createdAt: datetime\n    author: {\n        name: string\n    }\n}\n\nfn getPost(id: uuid): Post?\n")),Object(i.b)("p",null,"You can then generate the TypeScript source for this description with ",Object(i.b)("inlineCode",{parentName:"p"},"sdkgen api.sdkgen -o api.ts -t typescript_nodeserver"),"."),Object(i.b)("h1",{id:"creating-base-project"},"Creating base project"),Object(i.b)("p",null,"Let's start a new project with TypeScript:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{}),"npm init -y\nnpm i --save-dev typescript\nnpm i @sdkgen/node-runtime\nnpx tsc --init -t esnext\n")),Object(i.b)("p",null,"Then create a ",Object(i.b)("inlineCode",{parentName:"p"},"main.ts")," file:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),'// Import sdkgen\'s runtime and the generated file\nimport { SdkgenHttpServer } from "@sdkgen/node-runtime";\nimport { api } from "./api";\n\n// Every endpoint described must receive some implementation\napi.fn.getPost = async (ctx, {id}) => {\n    return {\n        id,\n        title: "Getting Started",\n        author: {\n            name: "John Doe"\n        },\n        body: "Lorem ipsum",\n        createdAt: new Date(),\n    };\n};\n\n// Start a HTTP server for the API\nconst server = new SdkgenHttpServer(api, {});\nserver.listen(8000);\n')),Object(i.b)("h1",{id:"run-the-project"},"Run the project"),Object(i.b)("p",null,"Build and run it:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{}),"npx tsc\nnode main.js\n")))}o&&o===Object(o)&&Object.isExtensible(o)&&Object.defineProperty(o,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"getting-started/first-nodejs-server.mdx"}}),o.isMDXComponent=!0}}]);
//# sourceMappingURL=getting-started-first-nodejs-server.b04f1725e6823da30fd2.js.map